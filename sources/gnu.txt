# Check out cmake version
cmake --version
# Edit "CMakeLists.txt"
(
# The cmake have lower version.
cmake_minimum_required(VERSION 3.1)

# Elect project of itself.
project(<project>)

# Set completion to CXX or C.
# set(CXX_STANDARD 11)
# set(C_STANDARD 99)

# Check out completion to CXX or C.
# include(CheckCCompilerFlag)
# check_c_compiler_flag(-std=gnu99 FLAG_STD_C99)
# include(CheckCXXCompilerFlag)
# check_cxx_compiler_flag(-std=c++11 FLAG_STD_C11)

# Print version to CXX or C on screen.
# include(CMakePrintHelpers)
# cmake_print_variables(CMAKE_CXX_COMPILER)
# cmake_print_variables(CMAKE_C_COMPILER)

# Get all sources in the current folder.
# aux_source_directory(. SRC_LIST)
# Execute programming to be run.
# add_executable(<project> ${SRC_LIST})
# Look at the next line unless it is needed.

# The project has some folders.
# add_subdirectory(CHILD_FOLDER)
# aux_source_directory(. SRC_LIST)
# add_executable(<project> ${SRC_LIST})

# target_include_directories(<project> "${PROJECT_SOURCE_DIR}/CHILD_FOLDER")
# target_link_libraries(<project> CHILD_FOLDER)

)
# Get "makefile" on project path.
# mkdir build
cmake ../
make

Copy "Linux\InPackage\create.sh" to "/home/<username>/create.sh"
Create command who is created("vim /root/.bashrc" and input(alias create="bash /home/<username>/create.sh"))

!Generally,a dependency should be specified in a use of target_link_libraries() with the PRIVATE keyword if it is used by only the implementation of a library,and not in the header files.If a dependency is additionally used in the header files of a library (e.g. for class inheritance),then it should be specified as a PUBLIC dependency.A dependency which is not used by the implementation of a library,but only by its headers should be specified as an INTERFACE dependency.
!The same as up line,"*.c" use to PRIVATE,"*.h" use to INTERFACE,"*.c + *.h" use to PUBLIC.

